<?php
/**
 * @file
 * cp_export module
 */

/**
 * Mapping and lookup of taxonomies.
 *
 * Keep all configuration that is defined by categories here.
 *
 * The category section of the map has the subject code
 * as the key and the title as the value.
 * Example:
 *   '4' => array( //HEALTH & BEAUTY
 *     'en' => array('SUBJECT_CODE' => 'TITLE'),
 *     'fr' => array('SUBJECT_CODE' => 'TITLE'),
 *   ),
 */
function cp_export_map() {
  $map = array(
    // Term IDs for cities.
    'city' => array(
      '1' => 'VCR', // Vancouver.
      '2' => 'TOR', // Toronto.
      '3' => 'MTLE', // Montreal (English).
      '669' => 'MTLF', // Montréal (French).
      '782' => 'CGY', // Calgary.
    ),
    // Mapping of category to CP subject code.
    'category' => array(
      '4' => array( // HEALTH & BEAUTY.
        'en' => array(
          'Health' => 'xhealth',
          'lifestyle' => 'Lifestyle',
        ),
        'fr' => array('Hsante' => 'Santé'),
      ),
      '5' => array( // FASHION & SHOPPING.
        'en' => array('fashion' => 'Fashion'),
        'fr' => array('fashion' => 'Fashion'), // No french category provided.
      ),
      '6' => array(  // HOME & DECOR.
        'en' => array(
          'Ufamily' => 'Home+Family',
          'lifestyle' => 'Lifestyle',
        ),
        'fr' => array('Ufamily' => 'Home+Family'), // No french category provided.
      ),
      '7' => array( // ARTS & CULTURE.
        'en' => array(
          'entertainment' => 'Entertainment',
          'books' => 'Books',
          'film' => 'Film',
          'lifestyle' => 'Lifestyle',
          'music' => 'Music',
          'tv' => 'Television',
        ),
        'fr' => array(
          'FrMusic' => 'Musique',
          'FrFilm' => 'Cinema',
          'FrTV' => 'Television',
          'Arts' => 'Nouvelles arts et spectacles',
        ),
      ),
      '8' => array( // TRAVEL & LEISURE.
        'en' => array(
          'utravel' => 'Travel',
          'lifestyle' => 'Lifestyle',
        ),
        'fr' => array('frtravel' => 'Travel'),
      ),
      '9' => array( // DINING & NIGHTLIFE.
        'en' => array(
          'food' => 'Food',
          'lifestyle' => 'Lifestyle',
        ),
        'fr' => array('food' => 'Food'), // No french category provided.
      ),
      '10' => array( // MOMS & KIDS.
        'en' => array(
          'Ufamily' => 'Home+Family',
          'lifestyle' => 'Lifestyle',
        ),
        'fr' => array('1FamilyFR' => 'Family'),
      ),
    ),
    // Information about vocab IDs.
    'vocabs' => array(
      'tags' => 1,
      'city' => 2,
      'category' => 3,
    ),
    // Define which terms determine french content.
    'language' => array(
      'french' => array('669'),
    ),
  );
  return $map;
}

/**
 * Implements hook_perm().
 */
function cp_export_perm() {
  $permission = array('administer cp export');
  return $permission;
}

/**
 * Implements hook_menu().
 */
function cp_export_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/cp_export',
      'title' => "CP Export",
      'callback' => 'drupal_get_form',
      'callback arguments' => array('cp_export_settings'),
      'access' => user_access('administer cp export'),
    );
    return $items;
  }
}
/**
 * Configuration form.
 */
function cp_export_settings() {
  $form['cp_export_enable'] = array(
    '#type' => 'checkbox',
    '#default_value' => check_plain(variable_get('cp_export_enable', 0)),
    '#title' => t('Enable syndication to CP on cron runs.'),
  );
  $form['cp_ftp_server'] = array(
    '#title' => t('Server'),
    '#type' => 'textfield',
    '#default_value' => check_plain(variable_get('cp_ftp_server', '')),
    '#maxlength' => 50,
    '#description' => t('Enter your FTP Server'),
  );
  $form['cp_ftp_user'] = array(
    '#title' => t('User'),
    '#type' => 'textfield',
    '#default_value' => check_plain(variable_get('cp_ftp_user', '')),
    '#maxlength' => 50,
    '#description' => t('Enter your FTP Username'),
  );
  $form['cp_ftp_pass'] = array(
    '#title' => t('Password'),
    '#type' => 'textfield',
    '#default_value' => check_plain(variable_get('cp_ftp_pass', 0)),
    '#maxlength' => 50,
    '#size' => 15,
    '#description' => t('Enter your FTP Password'),
  );
  $form['cp_ftp_dir'] = array(
    '#title' => t('directory'),
    '#type' => 'textfield',
    '#default_value' => check_plain(variable_get('cp_ftp_dir', '')),
    '#maxlength' => 50,
    '#description' => t('Enter your default directory, this will most likely be public_html or blank'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_nodeapi().
 */
function cp_export_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'blog' || $node->type == 'daily_dose') {
    switch ($op) {
      case 'insert':
        // LEAVE IN FOR FUTURE USE.
        break;

      case 'view':
        // LEAVE IN FOR FUTURE USE.
        break;
    }
  }
}

/**
 * Create the xml version of the node.
 */
function cp_export_save_node($nid) {
  $node = node_load($nid);

  // Decide which template file to use.
  if ($node->type == 'blog') {
    $template_file = 'blog.xml';
    $fn_id = 'Diary';
  }
  else {
    $template_file = 'daily_dose.xml';
    $fn_id = 'Dose';
  }
  // Read the template file.
  $template = file_get_contents(drupal_get_path('module', 'cp_export') . "/" . $template_file);

  if ($template) {

    // Get the mapping data.
    $map = cp_export_map();

    // Get the subject category.
    $subj = current(array_intersect_key($map['category'], $node->taxonomy));

    // Get the city versions.
    $versions = array_intersect_key($map['city'], $node->taxonomy);
    foreach ($versions as $id => $city) {

      // Check if it's french or english.
      if (in_array($id, $map['language']['french'])) {
        $french = "";
        $fname = $city . '_' . $fn_id . '_' . current($subj['fr']) . '_' . format_date($node->created, 'custom', 'Ymd\THis');
        // Get the images.
        $images = cp_export_get_images($node, $fname, 'French');

        $french = cp_export_token_replace($node, $template, 'fr', $subj['fr'], $images);

        // Save the xml.
        cp_export_save_local($fname . '.xml', $french, 'French');
      }
      else {
        $english = "";
        $fname = $city . '_' . $fn_id . '_' . current($subj['en']) . '_' . format_date($node->created, 'custom', 'Ymd\THis');
        // Get the images.
        $images = cp_export_get_images($node, $fname, 'English');

        $english = cp_export_token_replace($node, $template, 'en', $subj['en'], $images);

        // Save the xml.
        cp_export_save_local($fname . '.xml', $english, 'English');
      }
    }
  }
  else {
    drupal_set_message('Unable to read template file', 'error');
  }
}

/**
 * Temporarly save nodes locally.
 */
function cp_export_save_local($file_name, $content, $lang_dir) {
  $file_dir = file_create_path(file_directory_path() . '/cp_export');
  file_check_directory($file_dir, 1);

  $file_dir = file_create_path($file_dir . '/' . $lang_dir);
  file_check_directory($file_dir, 1);

  $export_file = $file_dir . '/' . $file_name;
  $file = fopen($export_file, "w");
  if (!fwrite($file, $content)) {
    drupal_set_message('Unable to write to local file', 'error');
    return FALSE;
  }
  else {
    return TRUE;
  }
  fclose($file);
}

/**
 * Save all the images into a seperate folder.
 */
function cp_export_get_images($node, $fname, $dir) {
  // Make sure the files directory is created.
  $file_dir = file_create_path(file_directory_path() . '/cp_export');
  file_check_directory($file_dir, 1);
  $file_dir = file_create_path($file_dir . '/' . $dir);
  file_check_directory($file_dir, 1);

  $file_text = "";
  $file_count = 1;
  foreach ($node->files as $file) {
    // Create new filename.
    $parts = explode('.', $file->filename);
    $new_name = $fname . '_' . $file_count . '.' . array_pop($parts);
    // Get dimension data.
    $info = image_get_info($file->filepath);

    $file_text .= '<CPLink Type="StoryPhoto" Number="' . $file_count . '" SourceFilePath="./' . $new_name . '" SourceHeight="' . $info['height'] . '" SourceWidth="' . $info['width'] . '" Caption="' . $file->description . '" />';
    file_copy($file->filepath, $file_dir . '/' . $new_name, FILE_EXISTS_REPLACE);
    $file_count++;
  }

  return $file_text;
}

/**
 * Replace the tokens in the templates with the real life content.
 */
function cp_export_token_replace($node, $template, $lang, $subjects, $images) {

  $map = cp_export_map();
  $tags = array();
  foreach ($node->taxonomy as $term) {
    if ($term->vid == $map['vocabs']['tags']) {
      $tags[] = $term->name;
    }
  }

  // Process the body for paragraphs and slugline.
  $content = _cp_export_process_body($node->body);
  // Process mutiple subjects.
  $subj = _cp_export_process_subj($subjects);

  // Set the replacement pattern.
  $search = array(
    '[TITLE]',
    '[ID]',
    '[CREATED_LONG]',
    '[CREATED_TEXT]',
    '[CREATED_SHORT]',
    '[YEAR]',
    '[BODY]',
    '[SLUGLINE]',
    '[LANG]',
    '[TAGS]',
    '[SUBJECT]',
    '[IMAGES]',
  );
  $replace = array(
    $node->title,
    $node->nid,
    date(DATE_ATOM, $node->created),
    format_date($node->created, 'custom', '\a\t G:i \o\n F j, Y'),
    format_date($node->created, 'custom', 'Ymd'),
    format_date($node->created, 'custom', 'Y'),
    $content['body'],
    $content['slugline'],
    $lang,
    implode(', ', $tags),
    $subj,
    $images,
  );

  return str_replace($search, $replace, $template);
}
/**
 * Implements hook_cron().
 */
function cp_export_cron() {
  $run = variable_get('cp_export_enable', 0);
  if ($run) {
    // Get all blog nodes that are set to be syndicated.
    $result = db_query('SELECT n.nid, n.vid FROM {node} n
      LEFT JOIN {content_field_cp_syndication_flag} sf ON n.nid = sf.nid AND n.vid = sf.vid
      LEFT JOIN {content_field_cp_syndication_time} st ON n.nid = st.nid AND n.vid = st.vid
      LEFT JOIN {content_field_cp_syndication_delivered} sd ON n.nid = sd.nid AND n.vid = sd.vid
      WHERE sf.field_cp_syndication_flag_value = 1
      AND sd.field_cp_syndication_delivered_value IS NULL
      AND st.field_cp_syndication_time_value < %d;', time());

    if (db_num_rows($result)) {
      while ($node = db_fetch_object($result)) {
        cp_export_save_node($node->nid);
        db_query('UPDATE {content_field_cp_syndication_delivered} sd
          SET sd.field_cp_syndication_delivered_value = %d
          WHERE sd.nid = %d AND sd.vid = %d;', time(), $node->nid, $node->vid
        );
      }
      cp_export_move_files();
      cache_clear_all('*', 'cache_content', TRUE);
      watchdog('cp_syndication', 'Cron run completed.');
    }
  }
}

/**
 * Move files to the server.
 */
function cp_export_move_files() {
  $ftp_server = check_plain(variable_get('cp_ftp_server', ''));
  $ftp_uname = check_plain(variable_get('cp_ftp_user', ''));
  $ftp_pass = check_plain(variable_get('cp_ftp_pass', ''));
  $ftp_directory = check_plain(variable_get('cp_ftp_dir', ''));
  if (!$fp = ftp_connect($ftp_server, 21, 30)) {
    drupal_set_message('Connection failed');
    return;
  }
  if (!ftp_login($fp, $ftp_uname, $ftp_pass)) {
    drupal_set_message('Login failed');
    return;
  }
  if (!ftp_chdir($fp, $ftp_directory)) {
    drupal_set_message('Unable to change directory to: ' . $ftp_directory);
    return;
  }

  // English first.
  $e_dir = file_directory_path() . '/cp_export/English';
  if (is_dir($e_dir)) {
    $files = file_scan_directory($e_dir, '.*');

    if (!ftp_chdir($fp, 'English')) {
      drupal_set_message('Unable to change directory to: English');
      return;
    }
    foreach ($files as $path => $file) {
      if (ftp_put($fp, $file->basename, $path, FTP_BINARY)) {
        file_delete($path);
      }
    }
  }

  // French.
  $f_dir = file_directory_path() . '/cp_export/French';
  if (is_dir($f_dir)) {
    $files = file_scan_directory($f_dir, '.*');

    if (!ftp_chdir($fp, '../French')) {
      drupal_set_message('Unable to change directory to: French');
      return;
    }
    foreach ($files as $path => $file) {
      if (ftp_put($fp, $file->basename, $path, FTP_BINARY)) {
        file_delete($path);
      }
    }
  }

  // Images.
  $i_dir = file_directory_path() . '/cp_export/images';
  if (is_dir($i_dir)) {
    $files = file_scan_directory($i_dir, '.*');

    if (!ftp_chdir($fp, '../images')) {
      drupal_set_message('Unable to change directory to: images');
      return;
    }
    foreach ($files as $path => $file) {
      if (ftp_put($fp, $file->basename, $path, FTP_BINARY)) {
        file_delete($path);
      }
    }
  }

  ftp_close($fp);
}

/**
 * Implements hook_form_alter().
 *
 * Show/hide fields depending if the node has been syndicated or not.
 */
function cp_export_form_alter($form_id, &$form) {
  if (isset($form['form_id']) && isset($form['#node'])) {
    if ($form_id == 'blog_node_form' || $form_id == 'daily_dose_node_form') {
      $node = $form['#node'];

      // Add a syndication fieldset.
      $form['syndication_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Syndication options'),
        '#collapsible' => TRUE,
        '#collapsed' => $node->field_cp_syndication_flag[0]['value'] ? FALSE : TRUE,
        '#weight' => 36,
      );

      // Move the fields into the fieldset.
      $form['syndication_settings']['field_cp_syndication_flag'] = $form['field_cp_syndication_flag'];
      $form['syndication_settings']['field_cp_syndication_flag']['#weight'] = -1;

      $form['syndication_settings']['field_cp_syndication_time'] = $form['field_cp_syndication_time'];
      $form['syndication_settings']['field_cp_syndication_delivered'] = $form['field_cp_syndication_delivered'];

      // If a deliver time is set we show that date and hide all other fields.
      if ($node->field_cp_syndication_delivered[0]['value']) {
        $form['syndication_settings']['information'] = array(
          '#value' => t('This post was syndicated on: ') . $node->field_cp_syndication_delivered[0]['value'],
        );

        $form['syndication_settings']['field_cp_syndication_flag']['#prefix'] = '<div style="display:none;">';
        $form['syndication_settings']['field_cp_syndication_flag']['#suffix'] = '</div>';

        $form['syndication_settings']['field_cp_syndication_time']['#prefix'] = '<div style="display:none;">';
        $form['syndication_settings']['field_cp_syndication_time']['#suffix'] = '</div>';

        $form['syndication_settings']['field_cp_syndication_delivered']['#prefix'] = '<div style="display:none;">';
        $form['syndication_settings']['field_cp_syndication_delivered']['#suffix'] = '</div>';
      }
      else {
        $form['syndication_settings']['field_cp_syndication_delivered']['#type'] = 'hidden';
      }

      unset($form['field_cp_syndication_flag']);
      unset($form['field_cp_syndication_time']);
      unset($form['field_cp_syndication_delivered']);
    }
  }
}

/**
 * Helper function to clean out the body text.
 */
function _cp_export_process_body($body) {
  // Strip everything beside p tags.
  $text = strip_tags($body, '<p>');

  // Now split it into an array and loop through it.
  $slugline = "";
  $clean = "";
  $count = 1;
  $parts = explode('</p>', $text);
  foreach ($parts as $p) {
    // Remove all tags.
    $p = trim(strip_tags($p));
    // Now remove the pesky &nbsp;
    $p = str_replace('&nbsp;', "", $p);
    $p = trim($p, chr(0xC2) . chr(0xA0));
    $p = trim($p, '\xC2\xA0\n');

    // Only process the paragraph if it's not empty and not a &nbsp; tag.
    if (!empty($p)) {
      // If this is the first p then save it as the slugline.
      if ($count == 1) {
        $slugline = $p;
      }
      $clean .= '<CPStoryPara Number="' . $count . '">' . $p . '</CPStoryPara>';
      $count++;
    }
  }
  return array(
    'slugline' => $slugline,
    'body' => $clean,
  );
}

/**
 * Helper function to process multiple subjects.
 */
function _cp_export_process_subj($subjects) {
  $out = "";
  foreach ($subjects as $key => $value) {
    $out .= '<SubjectMatter FormalName="' . $key . '" />';
  }
  return $out;
}

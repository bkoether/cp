<?php
// $Id$
/**
* @file
* The Partial Module.
*/

require_once('partial.db.php');
require_once('partial.property.php');
require_once('partial.form.php');
require_once('partial.views.php');
require_once('partial.xml.php');
require_once('partial.file.php');

define('PARTIAL_PATH_PREFIX', 'partial/');
define('PARTIAL_ADMIN_PATH', 'admin/build/partials');

function partial_perm() {
  return array('administer partials');
}

function partial_files() {
  $retVal = array('template'=>new PartialFile('template', 'Template', '.tpl.php'),
    'css'=>new PartialFile('css', 'CSS', '.css'),
    'js'=>new PartialFile('js', 'Javascript', '.js'),
    'php'=>new PartialFile('php', 'PHP', '.php'),
  );
  return $retVal;  
}

function partial_breadcrumb() {
  $retVal = array(
    l(t('Home'), NULL),
    l(t('Administer'), 'admin'),
    l(t('Site Building'), 'admin/build'),
    l(t('Partials'), 'admin/build/partials'),  
  );
  return $retVal;  
}

function partial_property_types() {
  $retVal = array();
  $retVal['textfield'] = 'Text Field';
  $retVal['vocabulary'] = 'Vocabulary';
  $retVal['menu'] = 'Menu Item';
  $retVal['taxonomy'] = 'Taxonomy Term';
  if (module_exists('content')) {
    $retVal['date_field'] = 'Date Field';
  }
  $retVal['node'] = 'Node';
  return $retVal;
}

function partial_menu($mayCache) {
   $items = array();
   if ($mayCache) {
    //good place to initialize this

    $items[] = array(
      'path' => 'partial/node/autocomplete',
      'title' => t('Autocomplete node'),
      'callback' => 'partial_node_autocomplete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK
    );
    
    $items[] = array(
      'path' => 'admin/settings/partial',
      'title' => t('Administer Partials'),
      'description' => t('Configure module partial.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('partial_admin_settings'),
      'access' => user_access('administer partials'),
      'type' => MENU_NORMAL_ITEM);
    
    $items[] = array(
      'path' => PARTIAL_ADMIN_PATH,
      'title' => t('Partials'),
      'description' => t('Create and manage partials.'),
      'callback' => 'partial_admin_page',
      'access' => user_access('administer partials'),
      'type' => MENU_NORMAL_ITEM);

//    $items[] = array('path' => PARTIAL_ADMIN_PATH . '/list',
//      'title' => t('List'),
//      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => PARTIAL_ADMIN_PATH . '/add',
      'title' => t('Add partial'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('partial_form'),
      'access' => user_access('administer partials'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => PARTIAL_ADMIN_PATH . '/import',
      'title' => t('Import'),
      'access' => user_access('administer partials'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('partial_xml_import_form'),
      'type' => MENU_LOCAL_TASK);

    $partials = partial_db_get_pages();
     if (!empty($partials)) {
       foreach($partials as $partial) {
           $items[] = array(
           'path' => $partial->page_url,
           'title' => $partial->page_title,
           'callback' => 'partial_page',
           'access' => TRUE,
           'type' => MENU_CALLBACK,
         );
       }
     }
    $partials = partial_db_get_simple_pages();
     if (!empty($partials)) {
       foreach($partials as $partial) {
           $items[] = array(
           'path' => $partial->simple_page_url,
           'title' => $partial->simple_page_title,
           'callback' => 'partial_simple_page',
           'access' => TRUE,
           'type' => MENU_CALLBACK,
         );
       }
     }

    $partials = partial_db_get_virtual_files();
     if (!empty($partials)) {
       foreach($partials as $partial) {
        if ($partial->use_internal_css) {
          $items[] = array(
            'path' => PARTIAL_PATH_PREFIX . $partial->partial_file . '.css',
            'callback' => 'partial_virtual_file',
            'callback arguments' => array($partial, 'css'),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
        }
        if ($partial->use_internal_js) {
          $items[] = array(
            'path' => PARTIAL_PATH_PREFIX . $partial->partial_file . '.js',
            'callback' => 'partial_virtual_file',
            'callback arguments' => array($partial, 'js'),
            'access' => TRUE,
            'type' => MENU_CALLBACK,
          );
        }
       }
     }
  } else {
    $pid = arg(1);
    if (arg(0) == 'partial' && is_numeric($pid)) {
      $partial = partial_db_load($pid);
      if ($partial) {
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid,
          'title' => t('Partial'),
          'callback' => 'partial_partial_page',
          'callback arguments' => array($pid),
          'access' => user_access('administer partials'),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid .'/view',
          'title' => t('View'),
          'callback' => 'partial_partial_page',
          'callback arguments' => array($pid),
          'access' => user_access('administer partials'),
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid .'/edit',
          'title' => t('Edit'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('partial_form', $partial),
          'access' => user_access('administer partials'),
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid .'/delete',
          'title' => t('Delete Partial'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('partial_delete_confirm', $pid),
          'access' => user_access('administer partials'),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid .'/export',
          'title' => t('Export'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('partial_xml_form', $pid),
          'weight' => 5,
          'access' => user_access('administer partials'),
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => PARTIAL_PATH_PREFIX . $pid .'/clone',
          'title' => t('Clone Partial'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('partial_form', $partial, true),
          'access' => user_access('administer partials'),
          'type' => MENU_CALLBACK);
      }
    }
  }
  return $items;
}

function partial_partial_page($pid) {
  drupal_set_breadcrumb(partial_breadcrumb());  
  return partial_render($pid);
}

function partial_delete_confirm($pid) {
 $form['pid'] = array('#type' => 'value', '#value' => $pid);
  $partial = partial_db_load($pid);
 return confirm_form($form,
   t('Are you sure you want to delete %title?', array('%title' => $partial->title)),
   isset($_GET['destination']) ? $_GET['destination'] : PARTIAL_ADMIN_PATH,
   t('This action cannot be undone.'),
   t('Delete'), t('Cancel'));
}

/**
 * Execute node deletion
 */
function partial_delete_confirm_submit($form_id, $form_values) {
  if ($form_values['confirm']) {
    partial_db_delete($form_values['pid']);
    module_invoke_all('partial_delete', $form_values['pid']);
  }
  return PARTIAL_ADMIN_PATH;
}

//pass a file straight without drupal stuff
function partial_virtual_file($partial, $type) {
  $partial_files = partial_files();
  $cssFile = $partial_files['css'];
  $jsFile = $partial_files['js'];
  switch ($type) {
    case $cssFile->getKey():
      header("Content-Type: text/css");
      print ($cssFile->getFileValue($partial));      
      break;
    case $jsFile->getKey():
      header("Content-Type: text/javascript");
      print ($jsFile->getFileValue($partial));
      break;
  }
}

function partial_clone($nid) {
  $node = node_load($nid);
  unset($node->nid);
  $node->title = 'Clone of ' . $node->title;
  node_save($node);
  if (!$destination = $_GET['destination']) {
    $destination = 'admin/build/partials';
  }
  drupal_goto($destination);
}

function partial_admin_page() {
  drupal_set_title('Administer Partials');
  return theme('partial_admin_page');
}

function theme_partial_admin_page() {
  $results = partial_db_get_partials();
  $rows = array();
  $header = array(
                array('data'=>t('Partial'), 'field'=>'title'),
                array('data'=>t('File'), 'field'=>'partial_file'),
                array('data'=>t('Page'), 'field'=>'page_url'),
                array('data'=>t('Simple Page'), 'field'=>'simple_page_url'),
                array('data'=>t('Block'), 'field'=>'provide_block')
                );
  if (module_exists('views')) {
    $header[] = array('data'=>t('View Style'), 'field'=>'provide_view_style');
  }
  $header[] = t('Actions');

  
  if ($results) {
    $index = 0;
    foreach ($results as $partial) {
      $rows[$index] = array(array('data'=>l($partial->title, PARTIAL_PATH_PREFIX . $partial->pid)),
                  array('data'=>$partial->partial_file),
                  array('data'=>$partial->provide_page?l($partial->page_url, $partial->page_url):''),
                  array('data'=>$partial->provide_simple_page?l($partial->simple_page_url, $partial->simple_page_url):''),
                  array('data'=>$partial->provide_block?'X':'')
                  );
      if (module_exists('views')) {
        $rows[$index][] = array('data'=>$partial->provide_view_style?'X':'');
      }
      $rows[$index][] = array('data'=>l('Edit', PARTIAL_PATH_PREFIX . $partial->pid . '/edit', null) . '&nbsp;&nbsp;&nbsp;'
                              . l('Export', PARTIAL_PATH_PREFIX . $partial->pid . '/export', null) . '&nbsp;&nbsp;&nbsp;'
                              . l('Clone', PARTIAL_PATH_PREFIX . $partial->pid . '/clone', null) . '&nbsp;&nbsp;&nbsp;'                     
                              . l('Delete', PARTIAL_PATH_PREFIX . $partial->pid . '/delete', null));
      $index++;
    }
  }
  $output = theme('table', $header, $rows);
  return $output;
}

//partial admin settings page
function partial_admin_settings() {
  $form['partial_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display partial links'),
    '#default_value' => variable_get('partial_link',true),
  );  
  return system_settings_form($form);
}

//display a partial as a page
function partial_page() {
  $partials = partial_db_get_pages(); // this should be cached
  $arg = arg(0);
  foreach ($partials as $partial) {
    if (!strcmp($partial->page_url, $arg)) {
      $output .= partial_render($partial->pid);
      break;
    }
  }
  return $output;
}

function partial_simple_page() {
  $partials = partial_db_get_simple_pages(); // this should be cached
  $arg = arg(0);
  foreach ($partials as $partial) {
    if (!strcmp($partial->simple_page_url, $arg)) {
      $output .= partial_render($partial->pid);
      break;
    }
  }
  print $output;
}

//display a partial as a block
function partial_block($op='list', $delta=0, $edit=array()) {
  if ($op == "list") {
    $partials = partial_db_get_blocks();
    foreach ($partials as $pid=>$partial) {
      $block[$pid]["info"] = $partial->title;
    }
    return $block;
  } else if ($op == 'view') {
	  $retVal = array();
    if ($partial->block_title) {
      $retVal['subject'] = $partial->block_title;
    }
	  $retVal['content'] = partial_render($delta);
    return $retVal;
  }
}

//render a partial by name
function partial_render_name($name, $node=null) {
	$nid = partial_db_get_nid($name);
	if ($nid) {
		return partial_render($nid, $node);
  }
}

function partial_load_properties(&$partial) {
  if (!empty($partial->properties)) {
    foreach ($partial->properties as $key=>&$property) {
      $functionName = "partial_property_{$property['type']}_load";
      if (function_exists($functionName)) {
        $property['value'] = call_user_func($functionName, $partial, $property);
      }
      $retVal[$key] = $property['value'];
    }
    $test = module_invoke_all('load_partial_properties', $partial, $retVal);
    $retVal = array_merge($retVal, $test);
    return $retVal;
  }
}

function partial_load_partial_properties($partial, &$retVal) {
  return null;
}

function partial_controls($partial) {
  $output = '';
  $partial_files = partial_files();
  $extension = $partial_files['template']->getExtension();
  $controls = module_invoke_all('partial_controls', $partial);
  if (!empty($controls)) {
    foreach ($controls as $control) {
      $output .= $control;
    }
  }
  if (user_access('administer partials') && variable_get('partial_link', true)) {
    $path = base_path() . drupal_get_path('module', 'partial') . '/partial.gif';
    $graphic = "<img src='$path'/>";
    $output .= l($graphic, PARTIAL_PATH_PREFIX . $partial->pid . '/edit', array('class'=>'partialLink'), null, null, false, true);
  }
  if (!empty($output)) {
    $output = "<div class='partialControls'>" . $output . '</div>';
  }
  return $output;
}

function partial_post_load_partial_properties($partial, &$properties) {
  return $properties;
}

//render a partial by nid
function partial_render($pid, $node=null) {
  drupal_add_css(drupal_get_path('module', 'partial') . '/partial.css');
  
  $partial = partial_db_load($pid);
  
  $output = "<div class='partial'>";
  $output .= partial_controls($partial);
  
  $properties = partial_load_properties($partial);
  if ($node) {
    $properties['node'] = partial_internal_build_node($node);
  } else if ($properties['node']) {
    $node = partial_internal_build_node($properties['node']);
    $properties['node'] = $node;
  }
  $properties = module_invoke_all('post_load_partial_properties', $partial, $properties);
  
  partial_load_extra_files($partial);
  if ($partial->use_internal_template) {
    $output .= partial_load_internal_template($partial, $properties);
  } else if ($partial->partial_file) {
    $partial_files = partial_files();
    $partialFile = $partial_files['template'];
/*
    if ($partial->node_prefix) {
      $testPath = path_to_theme() . '/partials/' . $partial->partial_file . '/' . $node->type . '-' . $partial->partial_file . $partialFile->getExtension();
      if (file_exists($testPath)) {
        $path = $testPath;
      } else {
        $path = path_to_theme() . '/partials/' . $partial->partial_file . '/node-' . $partial->partial_file . $partialFile->getExtension();
      }
    } else {
    }
*/
    $path = $partialFile->getFullPath($partial, $properties['node']);
    if (file_exists($path)) {
      if ($properties) {
        extract($properties, EXTR_SKIP);  // Extract the variables to a local namespace
      }
      ob_start();                      // Start output buffering
      include $path;               // Include the file
      $output .= ob_get_contents();   // Get the contents of the buffer
      ob_end_clean();                  // End buffering and discard
//      $output .= _phptemplate_callback($path, $properties);
    } else {
      $output .= "COULD NOT FIND TEMPLATE " . $path;
    }
  }
  
//  if ($addDiv) {
    $output .= '</div>';
//  }
  return $output;
}

function partial_load_internal_template($partial, $properties) {  // i think i do not have to do this ..i inject the variables!
 // global $theme_engine;
//  $variables = $partial->variables;
//  $variables = array_merge($variables, _phptemplate_default_variables($hook, $variables));

  // Allow specified variables to be overridden
//  $variables_function = '_'. $theme_engine .'_variables';
//  if (function_exists($variables_function)) {
//    $variables = array_merge($variables, call_user_func($variables_function, $hook, $variables));
//  }

  if (!empty($properties)) {
    extract($properties, EXTR_SKIP);  // Extract the variables to a local namespace
  }
  ob_start();                      // Start output buffering
                 // Include the file
  $check = eval("?>" . $partial->internal_template);  // Get the contents of the buffer
  $contents = ob_get_contents();
  ob_end_clean();                  // End buffering and discard
  return $contents;                // Return the contents
}

function partial_internal_build_node($node) {

  if ($node) {
    $node = node_build_content($node, $teaser, $page);
  
    if ($links) {
      $node->links = module_invoke_all('link', 'node', $node, !$page);
  
      foreach (module_implements('link_alter') AS $module) {
        $function = $module .'_link_alter';
        $function($node, $node->links);
      }
    }
  
    // Set the proper node part, then unset unused $node part so that a bad
    // theme can not open a security hole.
    $content = drupal_render($node->content);
    if ($teaser) {
      $node->teaser = $content;
      unset($node->body);
    }
    else {
      $node->body = $content;
      unset($node->teaser);
    }
  
    // Allow modules to modify the fully-built node.
    node_invoke_nodeapi($node, 'alter', $teaser, $page);
  }

  return $node;
}

/*
function partial_load_variable_defs($partialFile) {
  if (!empty($partialFile)) {
    $file = path_to_theme() . '/' . $partialFile . '.php';
    if (file_exists($file)) {
      require_once($file);
      $functionName = $partialFile . '_variables';
      if (function_exists($functionName)) {
        return call_user_func($functionName);
      }
    }
  }
}
*/
function partial_load_extra_files($partial) {
  if ($partial) {
    static $clean_url;
    if (!isset($clean_url)) { 
      $clean_url = (bool)variable_get('clean_url', '0');
    }
    $partial_files = partial_files();
    $cssFile = $partial_files['css'];
    if ($cssFile->getUseValue($partial)) {
      $path = $clean_url?'':'?q=';
      $path .= $cssFile->getVirtualPath($partial);
      drupal_add_css($path);
    } else {
      $fullPath = $cssFile->getFullPath($partial);
      if (file_exists($fullPath)) {
        drupal_add_css($fullPath);
      }
    }
    
    //we need to add virtual file support for php somehow?
    $phpFile = $partial_files['php'];
    if ($phpFile->getUseValue($partial)) {
      $fileData = $phpFile->getFileValue($partial);
      if (!empty($fileData)) {
        drupal_eval($fileData);
      }
    } else {
      $fullPath = $phpFile->getFullPath($partial);
      if (file_exists($fullPath)) {
        require_once($fullPath);
        $functionName = $partial->partial_file . '_init';
        if (function_exists($functionName)) {
          call_user_func($functionName);
        }        
      }
    }
    
    $jsFile = $partial_files['js'];
    if ($jsFile->getUseValue($partial)) {
      $path = $clean_url?'':'?q=';
      $path .= $jsFile->getVirtualPath($partial);
      drupal_add_js($path);
    } else {
      $fullPath = $jsFile->getFullPath($partial);
      if (file_exists($fullPath)) {
        drupal_add_js($fullPath);
      }
    }
  
  }
}

function partial_options($partials) {
  if (!empty($partials)) {
    foreach ($partials as $partial) {
      $retVal[$partial->nid] = $partial->title;
    }
  }
  return $retVal;
}

//we need to add filtering based off type for this
function partial_node_autocomplete($string) {  // sql should go in db file
  if ($string != '') { // if there are node_types passed, we'll use those in a MySQL IN query.
    $result = db_query_range(db_rewrite_sql('SELECT n.title, u.name FROM {node} n INNER JOIN {users} u ON u.uid = n.uid WHERE LOWER(title) LIKE LOWER("%%%s%%")'), $string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';

    $matches = array();
    while ($node = db_fetch_object($result)) {
      $n = $node->title;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (preg_match('/,/', $node->title) || preg_match('/"/', $node->title)) {
        $n = '"'. preg_replace('/"/', '""', $node->title) .'"';
      }
      $matches[$prefix . $n] = '<span class="autocomplete_title">'. check_plain($node->title) .'</span> <span class="autocomplete_user">('. t('by %user', array('%user' => check_plain($node->name))) .')</span>';
    }
    print drupal_to_js($matches);
    exit();
  }
}

function partial_clean_title($string) {
  $parse = array(" ","--","&");
  return str_replace($parse,"", $string); 
}

function partial_xml_form($pid) {
  drupal_set_breadcrumb(partial_breadcrumb());
  $partial = partial_db_load($pid);
  $form['xml'] = array(
    '#type' => 'textarea',
    '#rows' => 30,
    '#value' => partial_to_xml($partial),
  );
  return $form;
}

function partial_xml_import_form() {
  drupal_set_title('Import Partial');
  drupal_set_breadcrumb(partial_breadcrumb());
  $form['xml'] = array(
    '#type' => 'textarea',
    '#rows' => 20,
  );
  $form['import'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#weight' => 10,
  );  
  return $form;
}

function partial_xml_import_form_submit($form_id, &$form_values) {
  $xml = $form_values['xml'];
  if ($xml) {
    $partial = partial_from_xml($xml);
    $pid = partial_db_insert($partial);
    return PARTIAL_PATH_PREFIX . $pid . '/edit';
  } else {
    form_set_error('xml', t('Import field is empty.'));
  } 
}

//http://www.phpfreaks.com/quickcode/Array-to-Object/541.php
function arr2obj($arg_array) {
    $tmp = new stdClass; // start off a new (empty) object
    foreach ($arg_array as $key => $value) {
        if (is_array($value)) { // if its multi-dimentional, keep going :)
            $tmp->$key = arr2obj($value);
        } else {
            if (is_numeric($key)) { // can't do it with numbers :(
                die("Cannot turn numeric arrays into objects!");
            }
            $tmp->$key = $value;
        }
    }
    return $tmp; // return the object!16
} 
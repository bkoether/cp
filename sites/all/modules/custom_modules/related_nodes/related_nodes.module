<?php
/*
  calculate related nodes via tags,
  cheap (and simple) recommendations

  author: weston@netsign.com
*/

function related_nodes_display_related($nid) {
  $related = related_nodes_get_related($nid);
  $output = '<ul class="rn_related">' . "\n";
  foreach ($related as $node) {
    $output .= "<li>" . l($node->title, "node/{$node->nid}", array(), NULL, NULL, TRUE) . "</li>";
  }
  $output .= "</ul>\n";
  return $output;
}

// passed a node id this function returns nodes related by tags within the same location and topic
// the nodes returned are sorted first by number of matching tags and then by date
function related_nodes_get_related($nid) {
    $related = array();
    // fetch the tags for the node
    $tag_result = db_query("select tn.tid, td.name 
      from term_node as tn, term_data as td 
      where tn.nid = {$nid}
      and
      tn.tid = td.tid
      and
      td.vid = 1");
    while ($tag = db_fetch_object($tag_result)) {
      // get list of nodes tagged with each tag, limited by same location and same topic
      $node_result = db_query("select distinct n.nid, n.title, FROM_UNIXTIME(n.created) as nicetime, n.created
        from node as n, 
          term_node as tn, term_node as tn2, term_node as tn3, term_node as tn4, term_node as tn5, 
          term_data as td, term_data as td2 
        where
          tn.tid = {$tag->tid}
          and
          tn.nid = n.nid
          and
          n.nid != {$nid}
          and
          n.status = 1

          and
          tn2.nid = n.nid
          and
          tn2.tid = td.tid
          and 
          td.vid = 2
          and
          tn3.nid = {$nid}
          and 
          tn3.tid = tn2.tid

          and
          tn4.nid = n.nid
          and
          tn4.tid = td2.tid
          and
          td2.vid = 3
          and
          tn5.nid = {$nid}
          and 
          tn5.tid = tn4.tid

        order by n.created desc");
      
      // build list of related nodes
      while ($tagged_node = db_fetch_object($node_result)) {
        if ($related[$tagged_node->nid]) {
          // we've seen this node, just update its frequency
          $related[$tagged_node->nid]->freq += 1; 
        }
        else {
          // this a new related node
          $related[$tagged_node->nid] = (object) array(
            "nid"     => $tagged_node->nid,
            "title"   => $tagged_node->title,
            "freq"    => 1,
            "created" => $tagged_node->created );
        }
      }
    }

    // sort by frequency, and then by created date
    uasort($related, 'related_nodes_compare_freq_date');

    $numresults = 3;
    return array_slice($related, 0, $numresults);
}

// sort by frequency, and then by created date
function related_nodes_compare_freq_date($a, $b) {
  // my kingdom for a spaceship!
  // return (($a->freq <=> $b->freq) || ($a->created <=> $b->created) * -1);
  if ($a->freq > $b->freq) {
    return -1;
  }
  elseif ($a->freq < $b->freq) {
    return 1;
  }
  else {
    if ($a->created > $b->created) {
      return -1;
    }
    elseif ($a->created < $b->created) {
      return 1;
    }
    else {
      return 0;
    }
  }
}

?>